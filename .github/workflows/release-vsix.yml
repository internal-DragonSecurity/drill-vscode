name: Build & Release VSIX

on:
  # Tag like v0.0.3 to trigger a release
  push:
    tags:
      - "v*"
  # Manual trigger (optional)
  workflow_dispatch:
    inputs:
      version:
        description: "Version to package (e.g. 0.0.3). If empty and a tag triggered, it uses the tag."
        required: false
      prerelease:
        description: "Mark the GitHub Release as a prerelease?"
        type: boolean
        default: false

permissions:
  contents: write  # required to create releases

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Use Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6
        with:
          node-version: "22.21.0"
          cache: "npm"

      - name: Install deps
        run: npm ci

      # Align package.json version with tag (vX -> X), or with manual input
      - name: Compute version
        id: ver
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            V="${{ github.event.inputs.version }}"
          else
            # Strip leading 'v' from tag like v1.2.3
            V="${GITHUB_REF_NAME#v}"
          fi
          echo "version=$V" >> "$GITHUB_OUTPUT"

      - name: Set package.json version (idempotent)
        run: npm pkg set version="${{ steps.ver.outputs.version }}"

      - name: Build
        run: npm run build

      - name: Package VSIX
        run: npx vsce package
        # Output is usually: <name>-<version>.vsix

      - name: Find artifact
        id: artifact
        run: |
          VSIX="$(ls *.vsix | head -n1)"
          echo "path=$VSIX" >> "$GITHUB_OUTPUT"
          echo "VSIX=$VSIX"
      - name: Upload artifact
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5
        with:
          name: vsix
          path: ${{ steps.artifact.outputs.path }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: vsix
          path: ./dist

      - name: Compute release tag
        id: tag
        run: |
          if [ "${GITHUB_REF_TYPE}" = "tag" ] && [ -n "${GITHUB_REF_NAME}" ]; then
            echo "tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=v${{ steps.ver.outputs.version }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name:     ${{ steps.tag.outputs.tag }}
          prerelease: ${{ github.event.inputs.prerelease == true }}
          files: |
            dist/*.vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
